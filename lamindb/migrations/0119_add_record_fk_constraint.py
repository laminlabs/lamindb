# Generated by Django 5.2 on 2025-08-07 18:52

from django.db import migrations

TABLE_NAME = "lamindb_record"

CREATE_FUNCTION_SQL = f"""
CREATE OR REPLACE FUNCTION is_valid_record_type(type_id INTEGER, is_type BOOLEAN)
RETURNS BOOLEAN AS $
BEGIN
    -- Record with no type is valid
    IF type_id IS NULL THEN
        RETURN TRUE;
    END IF;

    -- If current record is a type, it can only reference schema-less types
    IF is_type = TRUE THEN
        RETURN EXISTS (
            SELECT 1 FROM lamindb_record
            WHERE id = type_id AND is_type = TRUE AND schema_id IS NULL
        );
    END IF;

    -- Regular records can reference any type
    RETURN EXISTS (
        SELECT 1 FROM lamindb_record
        WHERE id = type_id AND is_type = TRUE
    );
END;
$$ LANGUAGE plpgsql;
"""

ADD_CONSTRAINT_SQL = f"""
ALTER TABLE {TABLE_NAME}
ADD CONSTRAINT record_type_is_valid_fk
CHECK (is_valid_record_type(type_id));
"""

DROP_CONSTRAINT_SQL = (
    f"ALTER TABLE {TABLE_NAME} DROP CONSTRAINT IF EXISTS record_type_is_valid_fk;"
)
DROP_FUNCTION_SQL = "DROP FUNCTION IF EXISTS is_valid_record_type(INTEGER);"


def apply_postgres_constraint(apps, schema_editor):
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute(CREATE_FUNCTION_SQL)
        schema_editor.execute(ADD_CONSTRAINT_SQL)


def revert_postgres_constraint(apps, schema_editor):
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute(DROP_CONSTRAINT_SQL)
        schema_editor.execute(DROP_FUNCTION_SQL)


class Migration(migrations.Migration):
    dependencies = [
        ("lamindb", "0118_squashed"),
    ]

    operations = [
        migrations.RunPython(
            apply_postgres_constraint, reverse_code=revert_postgres_constraint
        ),
    ]
