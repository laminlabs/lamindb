from lnschema_core import File

File.__doc__ = """Files: data objects in storage & memory.

- Guide: :doc:`/guide/track`
- FAQ: :doc:`/faq/ingest`

Args:
   data: A path or an in-memory data object.
   name: Name of the data object, required if an in-memory object is passed.
   source: The source of the data object (a :class:`~lamindb.Run`).
   id: The id of the file.
   format: Whether to use `h5ad` or `zarr` to store an `AnnData` object.

Often, files represent atomic datasets in object storage:
jointly measured observations of variables (features).
They are generated by running code, instances of :class:`~lamindb.Run`.

A `file` may contain a single observation, for instance, a single image.

Files often have canonical on-disk and in-memory representations. If
choices among these representations are made, a one-to-one mapping can be
achieved, which means that any given `file` has a default in-memory and
on-disk representation.

LaminDB offers meaningful default choices. For instance,

- It defaults to pandas DataFrames for in-memory representation of tables
  and allows you to configure loading tables into polars DataFrames.
- It defaults to the `.parquet` format for tables, but allows you to
  configure `.csv` or `.ipc`.

Some datasets do not have a canonical in-memory representation, for
instance, `.fastq`, `.vcf`, or files describing QC of datasets.

.. note:: Examples for storage ⟷ memory correspondence:

   - Table: `.csv`, `.tsv`, `.parquet`, `.ipc`, `.feather`
     ⟷ `pd.DataFrame`, `polars.DataFrame`
   - Annotated matrix: `.h5ad`, `.h5mu`, `.zarr` ⟷ `anndata.AnnData`, `mudata.MuData`
   - Image: `.jpg`, `.png` ⟷ `np.ndarray`, ...
   - Tensor: zarr directory, TileDB store ⟷ zarr loader, TileDB loader
   - Fastq: `.fastq` ⟷ /
   - VCF: `.vcf` ⟷ /
   - QC: `.html` ⟷ /

"""
