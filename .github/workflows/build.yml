name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, staging]

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      GITHUB_EVENT_NAME: ${{ github.event_name }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        package:
          - "lamindb"
          - "lndb-storage"
    timeout-minutes: 25

    steps:
      - name: Checkout main
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Checkout lndocs
        uses: actions/checkout@v3
        with:
          repository: laminlabs/lndocs
          ssh-key: ${{ secrets.READ_LNDOCS }}
          path: lndocs
          ref: main
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: ".github/workflows/build.yml" # See dependencies below
      - name: Cache nox
        uses: actions/cache@v3
        with:
          path: .nox
          key: nox-${{ runner.os }}
      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Cache postgres
        id: cache-postgres
        uses: actions/cache@v3
        with:
          path: ~/postgres.tar
          key: cache-postgres-0
      - name: Cache postgres miss
        if: steps.cache-postgres.outputs.cache-hit != 'true'
        run: docker pull postgres:latest && docker image save postgres:latest --output ~/postgres.tar
      - name: Cache postgres use
        if: steps.cache-postgres.outputs.cache-hit == 'true'
        run: docker image load --input ~/postgres.tar
      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          pip install -U laminci
          pip install -U lamindb
      - name: Install apt-get dependencies
        run: |
          sudo apt-get -y install graphviz
          sudo apt-get install sqlite3-tools=3.37.2-2
          sudo apt-get install libpq-dev
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1
      - name: Lint
        if: ${{ matrix.python-version == '3.9' && matrix.package == 'lamindb' }}
        run: |
          nox -s lint
      - name: Build
        run: |
          nox -s "build(package='${{ matrix.package }}')"
      - name: Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Deploy docs
        if: ${{ matrix.python-version == '3.9' && matrix.package == 'lamindb' }}
        id: netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "_build/html"
          production-deploy: ${{ github.event_name == 'push' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      - name: Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
